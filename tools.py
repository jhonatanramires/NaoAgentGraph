from langchain_core.tools import tool
from langchain_community.tools import HumanInputRun
from langchain_community.tools.tavily_search import TavilySearchResults
#GOOGLE GMAIL
from agent.tools_gmail import toolkit as gmailToolkit

from nltk import flatten

#GOOGLE TASK API
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from utils.tasks import getCredentials

from datetime import datetime, timezone

from dotenv import load_dotenv
import sys
from agent.tools_weather import get_temperature, get_apparent_temperature, get_day_or_night, get_full_weather_report, get_precipitation, get_rain, get_relative_humidity, get_showers, get_snowfall
import os

sys.path.append("..\\utils")

import subprocess

load_dotenv()

tavily_api_key = os.getenv('TAVILY_API_KEY')

search = TavilySearchResults(tavily_api_key=tavily_api_key)

CREDS = getCredentials()

#GOOGLE TASK API
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

@tool
def getTaskInfo(lists=True, tasks=True):
    """
    A function that retrieves task information from Google Tasks and returns it as a JSON-like object.

    :param lists: If True, the function will retrieve the list of task lists.
    :param tasks: If True, the function will retrieve the tasks within each task list.
    :return: A dictionary containing details of task lists and tasks, or an error message.
    """
    task_data = {"taskLists": []}

    try:
        service = build("tasks", "v1", credentials=CREDS)

        # Call the Tasks API to get the list of task lists
        results = service.tasklists().list(maxResults=10).execute()
        items = results.get("items", [])

        if not items:
            return {"error": "No task lists found."}

        for item in items:
            tasklist_info = {
                "title": item.get("title", "N/A"),
                "id": item.get("id", "N/A"),
                "tasks": []
            }

            if tasks:
                # Call the Tasks API to get the tasks for each task list
                tasks_results = service.tasks().list(tasklist=item['id']).execute()
                tasks_items = tasks_results.get("items", [])

                for task in tasks_items:
                    task_info = {
                        "kind": task.get("kind", "N/A"),
                        "id": task.get("id", "N/A"),
                        "title": task.get("title", "N/A"),
                        "status": task.get("status", "N/A")
                    }
                    tasklist_info["tasks"].append(task_info)

            task_data["taskLists"].append(tasklist_info)

        return task_data

    except HttpError as err:
        return {"error": f"There was an HTTP error: {str(err)}"}

  
@tool
def createTask(tasklist_id,title,notes,due,parent_task_id=0,previous_task_id=0,status="needsAction",kind="tasks#task"):
  """
    Creates a new task in Google Tasks.

    This function constructs a task object with the provided parameters and inserts it into Google Tasks.

    Args:
        tasklist_id (str): The id of the parent tasklist
        title (str): The title of the task.
        notes (str): Notes or description of the task.
        due (str): Due date of the task in RFC 3339 format (e.g., "2024-12-31T23:59:59Z").
        parent_task_id (int, optional): ID of the parent task if this is a subtask. 
                                        Use 0 for top-level tasks. Defaults to 0.
        previous_task_id (int, optional): ID of the previous task for positioning. 
                                          Use 0 if it's the first task. Defaults to 0.
        status (str, optional): Status of the task. Can be either "needsAction" or "completed". 
                                Defaults to "needsAction".
        kind (str, optional): Type of the resource. Should always be "tasks#task". 
                              Defaults to "tasks#task".

    Returns:
        dict: A dictionary containing the details of the created task, including:
              - id: Unique identifier of the created task.
              - title: Title of the task.
              - status: Current status of the task.
              - due: Due date of the task.
              - notes: Notes or description of the task.
              - links: List of links associated with the task (if any).

    Raises:
        ValueError: If an invalid value is provided for 'status' or 'kind'.
        HTTPError: If an error occurs in communication with the Google Tasks API.

    Note:
        - The update timestamp (updated) is automatically set to the creation time.
        - Fields like 'id', 'selfLink', 'position', and 'etag' are generated by the API and cannot be set manually.
        - This function prints the details of the created task, but also returns a dictionary with this information.
    """
   
  # URL pointing to this task. Used to retrieve, update, or delete this task.
  # Obtén la fecha y hora actual en formato RFC 3339
  now = datetime.now(timezone.utc).isoformat()
  # Construyendo el objeto task
  task = {
    'status':status,
    'kind':kind,
    'updated':now,
    'title': title,
    'completed': None,
    'title':title,
    'deleted': False,
    'due': due,
    'notes': notes,

  }
  try:
    service = build("tasks", "v1", credentials=CREDS)

    # Call the Tasks API
    result = service.tasks().insert(
      tasklist=tasklist_id,
#     parent=parent_task_id,
#     previous=previous_task_id,
      body=task
    ).execute()
    print(f"Tarea creada con ID: {result['id']}")
    print(f"Título: {result['title']}")
    print(f"Estado: {result['status']}")
    print(f"Fecha de vencimiento: {result['due']}")
    print(f"Notas: {result['notes']}")
    #print(f"Enlaces:")
    #for link in result['links']:
    #    print(f"  - {link['description']}: {link['link']} ({link['type']})")
  except HttpError as err:
    print(err)

def postureNao(posture):
    Nao_command = "python2 .\\Nao\\setPosture.py " + str(posture)
    process = subprocess.Popen(Nao_command.split(), stdout=subprocess.PIPE)
    return "success"

@tool 
def set_posture_to(posture: str) -> str:
    """Usefull function when ask you for take or go to a posture only if the posture is in the following array ["StandInit","SitRelax","StandZero","LyingBelly","LyingBack","Stand","Crouch","Sit"]
       :param posture: posture to do must be a string not list or anything else
    """
    postureNao(posture)
    return "posture done"

@tool 
def say_joke(joke: str) -> str:
    """Usefull function when ask you for tell a joke you must pass the joke as argument but you must ASK before using this function to human concern"""
    print("JAJAJAJ JOKE",joke,"====================")
    return "joke sucessfully said"

def get_input() -> str:
    print("Insert your text. Enter 'q' or press Ctrl-D (or Ctrl-Z on Windows) to end.")
    contents = []
    while True:
        try:
            line = input()
        except EOFError:
            break
        if line == "q":
            break
        contents.append(line)
    return "\n".join(contents)

human = HumanInputRun(input_func=get_input)

tools = []

tools = [
  set_posture_to, 
  say_joke, 
  get_temperature, get_apparent_temperature, get_day_or_night, get_full_weather_report, get_precipitation, get_rain, get_relative_humidity, get_showers, get_snowfall,
  human,
  getTaskInfo,
  createTask,
  gmailToolkit
  #search,
]

tools = flatten(tools)


if __name__ == "__main__":   
    #print(tools)
    #postureNao("Crouch")
    #print(search.invoke({"query": "What happened in the latest burning man floods"}))
    print(getTaskInfo.invoke({}))
    """ print(createTask.invoke({
    "tasklist_id": "MTY4ODI3Mjk3NjgxNjMwOTI4OTE6MDow",
    "title": "Prepare Burning Man 2024 Report",
    "notes": "Create a comprehensive report on the Burning Man 2023 floods and their impact on future events.",
    "due": "2024-03-31T23:59:59Z",
    "parent_task_id": 0,
    "previous_task_id": 0,
    "status": "needsAction",
    "kind": "tasks#task"
}))
 """